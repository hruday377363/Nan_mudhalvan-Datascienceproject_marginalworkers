# -*- coding: utf-8 -*-
"""NM PHASE 2 INNOVATION MARGINAL WORKERS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aNDzzS4MtE4NzUstX7GNCLs8OavTQikK
"""

import pandas as pd
df=pd.read_csv('marginal_workers_tamil_nadu.csv.csv')

# Assuming df is your DataFrame and 'Age group' is the column you want to clean
df['Age group'] = df['Age group'].str.replace('`', '')
df

#  CLUSTERING OF AGE GROUPS AND INDUSTRIAL GROUPS INCLUDING MALES AND FEMALES CATEGORIES

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Load your dataset into a DataFrame (replace 'your_dataset_path' with the actual path)
df = pd.read_csv('marginal_workers_tamil_nadu.csv.csv')

# Data Cleaning and Exploration
numeric_columns = ['Industrial Category - A - Cultivators - Persons', 'Industrial Category - A - Cultivators - Males',
    'Industrial Category - A - Cultivators - Females', 'Industrial Category - B - Persons',
    'Industrial Category - B - Males', 'Industrial Category - B - Females',
    'Industrial Category - C - HHI - Males',
    'Industrial Category - C - HHI - Females',
    'Industrial Category - D & E - Males',
    'Industrial Category - D & E - Females',
    'Industrial Category - F - Persons',
    'Industrial Category - F - Males',
    'Industrial Category - F - Females',
    'Industrial Category - G - HHI - Persons',
    'Industrial Category - G - HHI - Males',
    'Industrial Category - G - HHI - Females',
    'Industrial Category - G - Non HHI - Persons',
    'Industrial Category - G - Non HHI - Males',
    'Industrial Category - G - Non HHI - Females',
    'Industrial Category - H - Persons',
    'Industrial Category - H - Males',
    'Industrial Category - H - Females',
    'Industrial Category - I - Persons',
    'Industrial Category - I - Males',
    'Industrial Category - I - Females',
    'Industrial Category - J - HHI - Persons',
    'Industrial Category - J - HHI - Males',
    'Industrial Category - J - HHI - Females',
    'Industrial Category - J - Non HHI - Persons',
    'Industrial Category - J - Non HHI - Males',
    'Industrial Category - J - Non HHI - Females',
    'Industrial Category - K to M - Persons',
    'Industrial Category - K to M - Males',
    'Industrial Category - K to M - Females',
    'Industrial Category - N to O - Persons',
    'Industrial Category - N to O - Males',
    'Industrial Category - N to O - Females',
    'Industrial Category - P to Q - Persons',
    'Industrial Category - P to Q - Males',
    'Industrial Category - P to Q - Females',
    'Industrial Category - R to U - HHI - Persons',
    'Industrial Category - R to U - HHI - Males',
    'Industrial Category - R to U - HHI - Females',
    'Industrial Category - R to U - Non HHI - Persons',
    'Industrial Category - R to U - Non HHI - Males',
    'Industrial Category - R to U - Non HHI - Females'
    # List of your numeric column names

]

# Convert columns to numeric, handling errors as NaN
df[numeric_columns] = df[numeric_columns].apply(pd.to_numeric, errors='coerce')

# Drop rows with NaN values in numeric columns
df.dropna(subset=numeric_columns, inplace=True)

# Exclude rows where 'Age group' is "Total"
df = df[df['Age group'] != 'Total']

# Standardizing Data
scaler = StandardScaler()
features = numeric_columns[1:]  # Use all the industrial categories (starting from the 2nd column)

df[features] = scaler.fit_transform(df[features])

# Applying K-Means Algorithm
n_clusters = 3  # Assuming you've determined the optimal number of clusters
kmeans = KMeans(n_clusters=n_clusters, random_state=0)
df['Cluster'] = kmeans.fit_predict(df[features])

# Scatter Plots for All Industrial Categories
for feature in features:
    plt.figure(figsize=(15, 8))

    for cluster in range(n_clusters):
        cluster_df = df[df['Cluster'] == cluster]
        plt.scatter(cluster_df['Age group'], cluster_df[feature], label=f'Cluster {cluster}')

    plt.xlabel('Age group')
    plt.ylabel(feature)
    plt.title(f'Clustering Analysis for {feature}')
    plt.legend()
    plt.show()

# Further steps for analysis and recommendations can be done here



plt.savefig(f'cluster_plot_{feature}.png')
plt.close()

#CLUSTERING ANALYSIS OF AGE GROUPS AND INDUSTRY CATEGORIES ONLY INCLUDING THE TOTAL PERSONS IN EACH CATEGORY

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Load your dataset into a DataFrame (replace 'your_dataset_path' with the actual path)
df = pd.read_csv('marginal_workers_tamil_nadu.csv.csv')

# Data Cleaning and Exploration
numeric_columns = ['Industrial Category - A - Cultivators - Persons',
                   'Industrial Category - B - Persons',
                   'Industrial Category - C - HHI - Persons',
                   'Industrial Category - D & E - Persons',
                   'Industrial Category - F - Persons',
                   'Industrial Category - G - HHI - Persons',
                   'Industrial Category - G - Non HHI - Persons',
                   'Industrial Category - H - Persons',
                   'Industrial Category - I - Persons',
                   'Industrial Category - J - HHI - Persons',
                   'Industrial Category - J - Non HHI - Persons',
                   'Industrial Category - K to M - Persons',
                   'Industrial Category - N to O - Persons',
                   'Industrial Category - P to Q - Persons',
                   'Industrial Category - R to U - HHI - Persons',
                   'Industrial Category - R to U - Non HHI - Persons'
                   ]

# Convert columns to numeric, handling errors as NaN
df[numeric_columns] = df[numeric_columns].apply(pd.to_numeric, errors='coerce')

# Drop rows with NaN values in numeric columns
df.dropna(subset=numeric_columns, inplace=True)

# Exclude rows where 'Age group' is "Total"
df = df[df['Age group'] != 'Total']

# Standardizing Data
scaler = StandardScaler()
features = numeric_columns[:]  # Use all the industrial categories
df[features] = scaler.fit_transform(df[features])

# Applying K-Means Algorithm
n_clusters = 3  # Assuming you've determined the optimal number of clusters
kmeans = KMeans(n_clusters=n_clusters, random_state=0)
df['Cluster'] = kmeans.fit_predict(df[features])

# Scatter Plots for All Industrial Categories
for feature in features:
    plt.figure(figsize=(15, 8))

    for cluster in range(n_clusters):
        cluster_df = df[df['Cluster'] == cluster]
        plt.scatter(cluster_df['Age group'], cluster_df[feature], label=f'Cluster {cluster}')

    plt.xlabel('Age group')
    plt.ylabel(feature)
    plt.title(f'Clustering Analysis for {feature}')
    plt.legend()
    plt.show()

    plt.savefig(f'cluster_plot_{feature}.png')
    plt.close()


# Further steps for analysis and recommendations can be done here

from google.colab import drive
drive.mount('/content/drive')