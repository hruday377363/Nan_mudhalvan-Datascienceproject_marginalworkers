# -*- coding: utf-8 -*-
"""Phase3_Nm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WG18wkdw11fX_lByHeVdLQTDZf2YeQsJ
"""

#Load the dataset

import pandas as pd
df=pd.read_csv('marginal_workers_tamil_nadu.csv.csv')
df

# Clean the dataset by removing '`' from the columns of Age group, state code ,Dsitrict Code
df['Age group'] = df['Age group'].str.replace('`', '')
df['State Code'] = df['State Code'].str.replace('`','')
df['District Code']= df['District Code'].str.replace('`','')
df



# first few rows
df.head()

df.tail()

# List the column names
print(df.columns)

#info
print(df.info())

# Check for missing values
df.isnull()

# Sum of missing values
print(df.isnull().sum())

# Data types of columns
print(df.dtypes)

# Convert columns to numeric, handling errors as NaN
numeric_columns = ['Industrial Category - A - Cultivators - Persons', 'Industrial Category - A - Cultivators - Males',
    'Industrial Category - A - Cultivators - Females', 'Industrial Category - B - Persons',
    'Industrial Category - B - Males', 'Industrial Category - B - Females',
    'Industrial Category - C - HHI - Males',
    'Industrial Category - C - HHI - Females',
    'Industrial Category - D & E - Males',
    'Industrial Category - D & E - Females',
    'Industrial Category - F - Persons',
    'Industrial Category - F - Males',
    'Industrial Category - F - Females',
    'Industrial Category - G - HHI - Persons',
    'Industrial Category - G - HHI - Males',
    'Industrial Category - G - HHI - Females',
    'Industrial Category - G - Non HHI - Persons',
    'Industrial Category - G - Non HHI - Males',
    'Industrial Category - G - Non HHI - Females',
    'Industrial Category - H - Persons',
    'Industrial Category - H - Males',
    'Industrial Category - H - Females',
    'Industrial Category - I - Persons',
    'Industrial Category - I - Males',
    'Industrial Category - I - Females',
    'Industrial Category - J - HHI - Persons',
    'Industrial Category - J - HHI - Males',
    'Industrial Category - J - HHI - Females',
    'Industrial Category - J - Non HHI - Persons',
    'Industrial Category - J - Non HHI - Males',
    'Industrial Category - J - Non HHI - Females',
    'Industrial Category - K to M - Persons',
    'Industrial Category - K to M - Males',
    'Industrial Category - K to M - Females',
    'Industrial Category - N to O - Persons',
    'Industrial Category - N to O - Males',
    'Industrial Category - N to O - Females',
    'Industrial Category - P to Q - Persons',
    'Industrial Category - P to Q - Males',
    'Industrial Category - P to Q - Females',
    'Industrial Category - R to U - HHI - Persons',
    'Industrial Category - R to U - HHI - Males',
    'Industrial Category - R to U - HHI - Females',
    'Industrial Category - R to U - Non HHI - Persons',
    'Industrial Category - R to U - Non HHI - Males',
    'Industrial Category - R to U - Non HHI - Females']
# Convert columns to numeric, handling errors as NaN
df[numeric_columns] = df[numeric_columns].apply(pd.to_numeric, errors='coerce')

# Drop rows with NaN values in numeric columns
df.dropna(subset=numeric_columns, inplace=True)

# Exclude rows where 'Age group' is "Total"
df = df[df['Age group'] != 'Total']
df

# Standardizing Data
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
numeric_columns = ['Industrial Category - A - Cultivators - Persons', 'Industrial Category - A - Cultivators - Males',
    'Industrial Category - A - Cultivators - Females', 'Industrial Category - B - Persons',
    'Industrial Category - B - Males', 'Industrial Category - B - Females',
    'Industrial Category - C - HHI - Males',
    'Industrial Category - C - HHI - Females',
    'Industrial Category - D & E - Males',
    'Industrial Category - D & E - Females',
    'Industrial Category - F - Persons',
    'Industrial Category - F - Males',
    'Industrial Category - F - Females',
    'Industrial Category - G - HHI - Persons',
    'Industrial Category - G - HHI - Males',
    'Industrial Category - G - HHI - Females',
    'Industrial Category - G - Non HHI - Persons',
    'Industrial Category - G - Non HHI - Males',
    'Industrial Category - G - Non HHI - Females',
    'Industrial Category - H - Persons',
    'Industrial Category - H - Males',
    'Industrial Category - H - Females',
    'Industrial Category - I - Persons',
    'Industrial Category - I - Males',
    'Industrial Category - I - Females',
    'Industrial Category - J - HHI - Persons',
    'Industrial Category - J - HHI - Males',
    'Industrial Category - J - HHI - Females',
    'Industrial Category - J - Non HHI - Persons',
    'Industrial Category - J - Non HHI - Males',
    'Industrial Category - J - Non HHI - Females',
    'Industrial Category - K to M - Persons',
    'Industrial Category - K to M - Males',
    'Industrial Category - K to M - Females',
    'Industrial Category - N to O - Persons',
    'Industrial Category - N to O - Males',
    'Industrial Category - N to O - Females',
    'Industrial Category - P to Q - Persons',
    'Industrial Category - P to Q - Males',
    'Industrial Category - P to Q - Females',
    'Industrial Category - R to U - HHI - Persons',
    'Industrial Category - R to U - HHI - Males',
    'Industrial Category - R to U - HHI - Females',
    'Industrial Category - R to U - Non HHI - Persons',
    'Industrial Category - R to U - Non HHI - Males',
    'Industrial Category - R to U - Non HHI - Females']

features = numeric_columns[:]  # Use all the industrial categories (starting from the 2nd column)

df[features] = scaler.fit_transform(df[features])
print(df[features])

# Unique Values in Categorical Columns
for column in df.select_dtypes(include=['object']):
    print(f"Unique values in {column}: {df[column].nunique()}")

correlation_matrix = df.corr()
print(correlation_matrix)

#One-Hot Encoding (for nominal variables) sample :
from sklearn.preprocessing import MinMaxScaler

columns_to_normalize = ['Worked for less than 3 months - Persons',
                         'Worked for less than 3 months - Males',
                         'Worked for less than 3 months - Females',

                        ]

scaler = MinMaxScaler()
df[columns_to_normalize] = scaler.fit_transform(df[columns_to_normalize])



# Before dropping rows
print(f"Number of rows before dropping: {df.shape[0]}")

# Drop rows with missing values
df.dropna(inplace=True)

# After dropping rows
print(f"Number of rows after dropping: {df.shape[0]}")

# Example: Creating a histogram for a column 'Age group'
import matplotlib.pyplot as plt
plt.hist(df['Age group'], bins=20)
plt.xlabel('Age group')
plt.ylabel('Frequency')
plt.title('Histogram of Age group')
plt.show()

districts = df['Area Name'].unique()
print(districts)

import matplotlib.pyplot as plt

# Assuming 'Area Name' contains district names and 'Total Workers' contains the total number of workers
district_workers = df.groupby('Area Name')['Worked for 3 months or more but less than 6 months -  Persons'].sum()

# Create a pie chart
plt.figure(figsize=(30, 18))
plt.pie(district_workers, labels=district_workers.index, autopct='%1.1f%%', startangle=140)
plt.title('Total Number of Workers by District')
plt.axis('equal')  # Equal aspect ratio ensures the pie chart is circular.

# Show the plot
plt.show()

district_workers = df['Worked for 3 months or more but less than 6 months -  Persons'].sum()
district_workers

df.head()

grouped_data = df.groupby(['Area Name', 'Age group', 'Total/ Rural/ Urban'])['Industrial Category - A - Cultivators - Persons'].sum().reset_index()

# Create a separate plot for each district
districts = grouped_data['Area Name'].unique()
grouped_data.head(30)

import matplotlib.pyplot as plt


# 'Area Name' represents the districts, 'Age group' represents the age groups, 'Total/ Rural/ Urban' represents rural or urban
# 'Industrial Category - A - Cultivators - Persons' represents the number of workers taken as sample'

# Grouping by 'Area Name', 'Age group', 'Total/ Rural/ Urban' and summing up the number of workers
grouped_data = df.groupby(['Area Name', 'Age group', 'Total/ Rural/ Urban'])['Industrial Category - A - Cultivators - Persons'].sum().reset_index()

# Create a separate plot for each district
districts = grouped_data['Area Name'].unique()

for district in districts:
    district_data = grouped_data[grouped_data['Area Name'] == district]
    plt.figure(figsize=(20, 10))
    bars = plt.bar(district_data['Age group'] + ' - ' + district_data['Total/ Rural/ Urban'], district_data['Industrial Category - A - Cultivators - Persons'])

    # Adding numbers on top of the bars
    for bar in bars:
        yval = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval), va='bottom', ha='center', fontsize=8, color='black')

    plt.title(f'Distribution of workers in {district}')
    plt.xlabel('Age Group and Area Type')
    plt.ylabel('Number of Workers')
    plt.xticks(rotation=70)
    plt.show()

import matplotlib.pyplot as plt
import zipfile

# ... (your previous code)

# Create a separate plot for each district
districts = grouped_data['Area Name'].unique()

# Create a zip file to store the plots
with zipfile.ZipFile('plots.zip', 'w') as zipf:
    for district in districts:
        district_data = grouped_data[grouped_data['Area Name'] == district]
        plt.figure(figsize=(20, 10))
        bars = plt.bar(district_data['Age group'] + ' - ' + district_data['Total/ Rural/ Urban'], district_data['Industrial Category - A - Cultivators - Persons'])

        # Adding numbers on top of the bars
        for bar in bars:
            yval = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval), va='bottom', ha='center', fontsize=8, color='black')

        plt.title(f'Distribution of workers in {district}')
        plt.xlabel('Age Group and Area Type')
        plt.ylabel('Number of Workers')
        plt.xticks(rotation=70)

        # Save the plot to a temporary file
        temp_filename = f'temp_plot_{district}.png'
        plt.savefig(temp_filename)
        plt.close()  # Close the current figure to free up memory

        # Add the temporary file to the zip archive
        zipf.write(temp_filename, arcname=f'distribution_{district}.png')

df.columns

data.head

import matplotlib.pyplot as plt
import pandas as pd

# Assuming 'df' is your DataFrame

# Filter data for Tamil Nadu, Total Persons
tn_data = df[(df['Area Name'] == 'State - TAMIL NADU') & (df['Total/ Rural/ Urban'] == 'Total')]

# Grouping by 'Age group' and summing up the number of workers
grouped_data = tn_data.groupby(['Age group'])['Total/ Rural/ Urban'].count().reset_index()

# Create a bar chart
plt.figure(figsize=(10, 6))
bars = plt.bar(grouped_data['Age group'], grouped_data['Total/ Rural/ Urban'])

# Adding numbers on top of the bars
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval), va='bottom', ha='center', fontsize=8, color='black')

plt.title(f'Distribution of workers in Tamil Nadu by Age Group')
plt.xlabel('Age Group')
plt.ylabel('Number of Workers')
plt.xticks(rotation=45)
plt.show()

# Entire State

import matplotlib.pyplot as plt

# Assuming 'df' is your DataFrame
# 'Area Name' represents the districts, 'Age group' represents the age groups, 'Total/ Rural/ Urban' represents rural or urban
# 'Industrial Category - A - Cultivators - Persons' represents the number of workers

# Filter data for State - Tamil Nadu
state_data = df[df['Area Name'] == 'State - TAMIL NADU']

# Grouping by 'Age group', 'Total/ Rural/ Urban' and summing up the number of workers
grouped_data = state_data.groupby(['Age group', 'Total/ Rural/ Urban'])['Industrial Category - A - Cultivators - Persons'].sum().reset_index()

# Create the bar chart
plt.figure(figsize=(20, 10))
bars = plt.bar(grouped_data['Age group'] + ' - ' + grouped_data['Total/ Rural/ Urban'], grouped_data['Industrial Category - A - Cultivators - Persons'])

# Adding numbers on top of the bars
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval), va='bottom', ha='center', fontsize=8, color='black')

plt.title('Distribution of workers in State - Tamil Nadu')
plt.xlabel('Age Group and Area Type')
plt.ylabel('Number of Workers')
plt.xticks(rotation=70)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt



# Filter for Tamil Nadu state
df = df[df['Area Name'] == 'State - TAMIL NADU']

# Select columns related to Industrial Category A
cols = [col for col in df.columns if 'Industrial Category - A' in col]
df = df[['Area Name', 'Age group', 'Total/ Rural/ Urban'] + cols]

# Melt the dataframe to bring it in a tidy format
df_melted = df.melt(id_vars=['Area Name', 'Age group', 'Total/ Rural/ Urban'], var_name='Category', value_name='Count')

# Plot
plt.figure(figsize=(10,6))
for category in df_melted['Category'].unique():
    data = df_melted[df_melted['Category'] == category]
    plt.bar(data['Age group'], data['Count'], label=category)

plt.xlabel('Age Group')
plt.ylabel('Count')
plt.title('Industrial Category A across different age groups in Tamil Nadu')
plt.legend()
plt.show()

df.columns

numbers = [
    4218884, 2136881, 2082003, 723891, 337268, 386623, 393082, 220314, 172768, 2372446,
    1034184, 1338262, 125099, 78052, 47047, 14979, 10290, 4689, 154133, 53418, 100715,
    306528, 188464, 118064, 7137, 6003, 1134, 390275, 241619, 148656, 510, 478, 32,
    171440, 129234, 42206, 84686, 81715, 2971, 42321, 33725, 8596, 463, 350, 113,
    23293, 16984, 6309, 26047, 21250, 4797, 56495, 42000, 14495, 58788, 19892, 38896,
    89703, 21366, 68337, 625350, 274811, 350539
]

total = sum(numbers)
print(f"The total is: {total}")