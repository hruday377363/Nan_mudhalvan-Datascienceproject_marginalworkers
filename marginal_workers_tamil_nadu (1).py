# -*- coding: utf-8 -*-
"""marginal_workers_tamil_nadu.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jCuU_m_D1drYZgiJeOHGsndcTHe2A2yi
"""

import pandas as pd

# Load the dataset
df = pd.read_csv('marginal_workers_tamil_nadu.csv')
df

# Display the first few rows of the dataset
print(df.head())

# List the column names
print(df.columns)

import pandas as pd

# Load the dataset
df = pd.read_csv('marginal_workers_tamil_nadu.csv.csv')


# Check for unique values in the 'Age' column
print(df['Age group'].unique())





# Generate descriptive statistics for the 'Age' column
age_stats = df['Age group'].describe()

# Print the descriptive statistics
print(age_stats)

# Create a histogram for age distribution
import matplotlib.pyplot as plt

plt.hist(df['Age group'], bins=20, edgecolor='k')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title('Age Distribution')

plt.show()

import pandas as pd

# Assuming df is your DataFrame
df = pd.read_csv('marginal_workers_tamil_nadu.csv')

# Print the columns
print(df.columns)



total_workers_10_14 = df.loc[df['Age group'] == '15-19'].sum()

print(f'Total number of workers in the age group 10-14: {total_workers_10_14}')

# Provided set of numbers
numbers = [14979, 10290, 4689, 154133, 53418, 100715, 306528, 188464, 118064, 7137, 6003, 1134, 390275, 241619, 148656, 510, 478, 32, 171440, 129234, 42206, 84686, 81715, 2971, 42321, 33725, 8596, 463, 350, 113, 23293, 16984, 6309, 26047, 21250, 4797, 56495, 42000, 14495, 58788, 19892, 38896, 89703, 21366, 68337, 625350, 274811, 350539]

# Remove every second and third element starting from index 1
result = [numbers[i] for i in range(len(numbers)) if i % 3 == 0]

# Display the result
print(result)

# Define the age groups
age_groups = ['5-9', '10-14', '15-19', '20-24', '25-29', '30-34', '35-39',
              '40-49', '50-59', '60-69', '70-79', '80-90']

# Calculate the midpoints of the age intervals
midpoints = [(int(group.split('-')[0]) + int(group.split('-')[1])) / 2 for group in age_groups]

# Assuming 'Age Group' is the column containing age interval information
# Assuming 'Total' is the column containing the count of workers

# Calculate the weighted average age
weighted_avg_age = sum(midpoints[i] * df[i] for i in range(len(age_groups))) / df[i].sum()

# Print the results
print(f"Weighted Average Age: {weighted_avg_age}")

# Assuming 'Males' and 'Females' are the column names
import pandas as pd

df=pd.read_csv('marginal_workers_tamil_nadu.csv.csv')
total_males = df['Worked for less than 3 months - Males'].sum()
total_females = df['Worked for less than 3 months - Females'].sum()

# Calculate proportions
proportion_males = total_males / (total_males + total_females)
proportion_females = total_females / (total_males + total_females)

# Calculate percentages
percentage_males = proportion_males * 100
percentage_females = proportion_females * 100

# Print the results
print(f"Proportion of Males: {proportion_males:.2f}")
print(f"Proportion of Females: {proportion_females:.2f}")
print(f"Percentage of Males: {percentage_males:.2f}%")
print(f"Percentage of Females: {percentage_females:.2f}%")

import pandas as pd
df=pd.read_csv('marginal_workers_tamil_nadu.csv.csv')
df.head()

df['Industrial Category - A - Cultivators - Persons']

df.loc[3, 'Age group']

import pandas as pd

# Assume df contains your data with columns for industrial groups and age intervals

# Melt the DataFrame to have 'Age group' as the identifier variable
melted_df = pd.melt(df, id_vars=['Age group'], value_vars=['Industrial Category - A - Cultivators - Persons', 'Industrial Category - B - Persons', 'Industrial Category - C  - Persons'], var_name='Industrial Group', value_name='Persons')

# Now, 'Age group' will be the rows and 'Industrial Group' will be the columns

# You can then perform clustering analysis on the 'Persons' values for each combination of 'Age group' and 'Industrial Group'

import pandas as pd
from sklearn.cluster import KMeans

# Assuming df_selected contains your data
# You may need to preprocess and standardize the data first

# Select the features for clustering
X = df_selected[['Industrial Category - A - Cultivators - Persons', 'Industrial Category - B - Persons', 'Industrial Category - C  - Persons', 'Age group[20-24]', 'Age group[25-29]', 'Age group[30-34]']]

# Choose the number of clusters (K)
k = 3

# Apply K-Means clustering
kmeans = KMeans(n_clusters=k, random_state=0).fit(X)

# Get cluster labels
cluster_labels = kmeans.labels_

# Add cluster labels to the DataFrame
df_selected['Cluster'] = cluster_labels

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Step 1: Data Collection and Preparation
# Load your dataset
# Assuming df is your DataFrame

# Step 2: Choosing the Clustering Algorithm
# Already chosen K-Means

# Step 3: Determining the Number of Clusters
# Applying the Elbow Method

# Let's assume you've determined the optimal number of clusters (n_clusters) using the Elbow Method.

# Step 4: Applying Clustering Algorithm
# Standardizing Data
import pandas as pd

# Load your dataset into a DataFrame (replace 'your_dataset_path' with the actual path)
df = pd.read_csv('marginal_workers_tamil_nadu.csv.csv')

# Data Cleaning and Exploration
# Example: Check for missing values
# Define the list of columns that should contain numeric data
numeric_columns = ['Industrial Category - A - Cultivators - Persons',
                   'Industrial Category - A - Cultivators - Males',
                   'Industrial Category - A - Cultivators - Females',
                   # Add other relevant columns here
                   'Age group']

# Exclude non-numeric rows
for col in numeric_columns:
    df = df[df[col].apply(lambda x: str(x).replace(',', '').isnumeric())]

# Now you can proceed with the clustering analysis

missing_values = df.isnull().sum()
print("Missing Values:")
print(missing_values)

# Example: Check data types
data_types = df.dtypes
print("\nData Types:")
print(data_types)

# Example: Summary statistics
summary_stats = df.describe()
print("\nSummary Statistics:")
print(summary_stats)

scaler = StandardScaler()
features = ['Industrial Category - A - Cultivators - Persons', 'Industrial Category - B - Persons', 'Age group']
df[features] = scaler.fit_transform(df[features])

# Applying K-Means Algorithm
n_clusters = 3  # Assuming you've determined the optimal number of clusters
kmeans = KMeans(n_clusters=n_clusters, random_state=0)
df['Cluster'] = kmeans.fit_predict(df[features])

# Step 5: Visualizing Clusters
# Scatter Plots
for cluster in range(n_clusters):
    cluster_df = df[df['Cluster'] == cluster]
    plt.scatter(cluster_df['Age group'], cluster_df['Industrial Category - A - Cultivators - Persons'], label=f'Cluster {cluster}')

plt.xlabel('Age group')
plt.ylabel('Industrial Category - A - Cultivators - Persons')
plt.title('Clustering Analysis')
plt.legend()
plt.show()

# Step 6: Interpreting Clusters
# Analyze clusters and extract insights

# Step 7: Recommendations and Conclusion
# Provide recommendations and summarize key findings

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Load your dataset into a DataFrame (replace 'your_dataset_path' with the actual path)
df = pd.read_csv('marginal_workers_tamil_nadu.csv.csv')

# Data Cleaning and Exploration
numeric_columns = ['Industrial Category - A - Cultivators - Persons',
                   'Industrial Category - A - Cultivators - Males',
                   'Industrial Category - A - Cultivators - Females',
                   'Industrial Category - B - Persons',
                   'Industrial Category - B - Males',
                   'Industrial Category - B - Females']

# Convert columns to numeric, handling errors as NaN
df[numeric_columns] = df[numeric_columns].apply(pd.to_numeric, errors='coerce')

# Drop rows with NaN values in numeric columns
df.dropna(subset=numeric_columns, inplace=True)

# Exclude rows where 'Age group' is "Total"
df = df[df['Age group'] != 'Total']

# Standardizing Data
scaler = StandardScaler()
features = ['Industrial Category - A - Cultivators - Persons', 'Industrial Category - B - Persons']
df[features] = scaler.fit_transform(df[features])

# Applying K-Means Algorithm
n_clusters = 3  # Assuming you've determined the optimal number of clusters
kmeans = KMeans(n_clusters=n_clusters, random_state=0)
df['Cluster'] = kmeans.fit_predict(df[features])

# Scatter Plots
for cluster in range(n_clusters):
    cluster_df = df[df['Cluster'] == cluster]
    plt.scatter(cluster_df['Age group'], cluster_df['Industrial Category - A - Cultivators - Persons'], label=f'Cluster {cluster}')

plt.xlabel('Age group')
plt.ylabel('Industrial Category - A - Cultivators - Persons')
plt.title('Clustering Analysis')
plt.legend()
plt.show()

# Further steps for analysis and recommendations can be done here

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Load your dataset into a DataFrame (replace 'your_dataset_path' with the actual path)
df = pd.read_csv('marginal_workers_tamil_nadu.csv.csv')

# Data Cleaning and Exploration
numeric_columns = ['Industrial Category - A - Cultivators - Persons',
                   'Industrial Category - A - Cultivators - Males',
                   'Industrial Category - A - Cultivators - Females',
                   'Industrial Category - B - Persons',
                   'Industrial Category - B - Males',
                   'Industrial Category - B - Females']

# Convert columns to numeric, handling errors as NaN
df[numeric_columns] = df[numeric_columns].apply(pd.to_numeric, errors='coerce')

# Drop rows with NaN values in numeric columns
df.dropna(subset=numeric_columns, inplace=True)

# Exclude rows where 'Age group' is "Total"
df = df[df['Age group'] != 'Total']

# Standardizing Data
scaler = StandardScaler()
features = ['Industrial Category - A - Cultivators - Persons', 'Industrial Category - B - Persons']
df[features] = scaler.fit_transform(df[features])

# Applying K-Means Algorithm
n_clusters = 3  # Assuming you've determined the optimal number of clusters
kmeans = KMeans(n_clusters=n_clusters, random_state=0)
df['Cluster'] = kmeans.fit_predict(df[features])

# Create a bar chart to visualize cluster distribution across age groups
cluster_counts = df.groupby(['Age group', 'Cluster']).size().unstack(fill_value=0)

cluster_counts.plot(kind='bar', stacked=True)
plt.xlabel('Age group')
plt.ylabel('Count')
plt.title('Cluster Distribution Across Age Groups')
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming df is your DataFrame after data cleaning and clustering
# If not, please perform the necessary data cleaning and clustering steps

# Create a pivot table for better visualization
pivot_table = df.pivot_table(index='Age group', columns='Cluster', values='Industrial Category - A - Cultivators - Persons', aggfunc='mean')

# Create a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(pivot_table, annot=True, fmt=".1f", cmap='YlGnBu')
plt.title('Cluster Analysis')
plt.show()

import pandas as pd
df=pd.read_csv('marginal_workers_tamil_nadu.csv.csv')

# Assuming df is your DataFrame and 'Age group' is the column you want to clean
df['Age group'] = df['Age group'].str.replace('`', '')
df

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Load your dataset into a DataFrame (replace 'your_dataset_path' with the actual path)
df = pd.read_csv('marginal_workers_tamil_nadu.csv.csv')


# Assuming df is your DataFrame and 'Age group' is the column you want to clean
df['Age group'] = df['Age group'].str.replace('`', '')

# Data Cleaning and Exploration
numeric_columns = [
    'Industrial Category - A - Cultivators - Persons', 'Industrial Category - A - Cultivators - Males',
    'Industrial Category - A - Cultivators - Females', 'Industrial Category - B - Persons',
    'Industrial Category - B - Males', 'Industrial Category - B - Females',
    'Industrial Category - C - HHI - Males',
    'Industrial Category - C - HHI - Females',
    'Industrial Category - D & E - Males',
    'Industrial Category - D & E - Females',
    'Industrial Category - F - Persons',
    'Industrial Category - F - Males',
    'Industrial Category - F - Females',
    'Industrial Category - G - HHI - Persons',
    'Industrial Category - G - HHI - Males',
    'Industrial Category - G - HHI - Females',
    'Industrial Category - G - Non HHI - Persons',
    'Industrial Category - G - Non HHI - Males',
    'Industrial Category - G - Non HHI - Females',
    'Industrial Category - H - Persons',
    'Industrial Category - H - Males',
    'Industrial Category - H - Females',
    'Industrial Category - I - Persons',
    'Industrial Category - I - Males',
    'Industrial Category - I - Females',
    'Industrial Category - J - HHI - Persons',
    'Industrial Category - J - HHI - Males',
    'Industrial Category - J - HHI - Females',
    'Industrial Category - J - Non HHI - Persons',
    'Industrial Category - J - Non HHI - Males',
    'Industrial Category - J - Non HHI - Females',
    'Industrial Category - K to M - Persons',
    'Industrial Category - K to M - Males',
    'Industrial Category - K to M - Females',
    'Industrial Category - N to O - Persons',
    'Industrial Category - N to O - Males',
    'Industrial Category - N to O - Females',
    'Industrial Category - P to Q - Persons',
    'Industrial Category - P to Q - Males',
    'Industrial Category - P to Q - Females',
    'Industrial Category - R to U - HHI - Persons',
    'Industrial Category - R to U - HHI - Males',
    'Industrial Category - R to U - HHI - Females',
    'Industrial Category - R to U - Non HHI - Persons',
    'Industrial Category - R to U - Non HHI - Males',
    'Industrial Category - R to U - Non HHI - Females' ]

# Convert columns to numeric, handling errors as NaN
df[numeric_columns] = df[numeric_columns].apply(pd.to_numeric, errors='coerce')

# Drop rows with NaN values in numeric columns
df.dropna(subset=numeric_columns, inplace=True)

# Exclude rows where 'Age group' is "Total"
df = df[df['Age group'] != 'Total']



# Standardizing Data
scaler = StandardScaler()
features = ['Industrial Category - A - Cultivators - Persons', 'Industrial Category - B - Persons']
df[features] = scaler.fit_transform(df[features])

# Applying K-Means Algorithm
n_clusters = 3  # Assuming you've determined the optimal number of clusters
kmeans = KMeans(n_clusters=n_clusters, random_state=0)
df['Cluster'] = kmeans.fit_predict(df[features])

# Create a pivot table for better visualization
pivot_table = df.pivot_table(index='Age group', columns='Cluster', values='Industrial Category - A - Cultivators - Persons', aggfunc='mean')

# Create a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(pivot_table, annot=True, fmt=".1f", cmap='YlGnBu')
plt.title('Cluster Analysis')
plt.show()

# Assuming df is your DataFrame after clustering
clustered_data = df[['Age group', 'Industrial Category - A - Cultivators - Persons', 'Cluster']]

# Sorting the data by Cluster for better interpretation
clustered_data = clustered_data.sort_values(by='Cluster')

# Displaying the first few rows
print(clustered_data.head())

